<?xml version="1.0" encoding="UTF-8"?>


<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		 xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>dev.ikm.maven.tinkar</groupId>
		<artifactId>tinkar-example-data-parent-test</artifactId>
		<version>1.1.6-SNAPSHOT</version>
	</parent>

	<artifactId>tinkar-example-data-pipeline</artifactId>
	<packaging>pom</packaging>

	<name>Tinkar Example Data Pipeline</name>
	<description>Tinkar Example Data Pipeline Project</description>
	<url>https://www.ikm.dev</url>

	<licenses>
		<license>
			<name>Apache License, Version 2.0</name>
			<url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>
			<distribution>repo</distribution>
			<comments>A business-friendly OSS license</comments>
		</license>
	</licenses>

	<developers>
		<!-- OSSRH Related Developer (Start) -->
		<developer>
			<id>ikmdev</id>
			<name>IKM Development Team</name>
			<email>support@ikm.dev</email>
		</developer>
		<!-- OSSRH Related Developer (End) -->
	</developers>

	<scm>
		<connection>scm:git:git://github.com/ikmdev/tinkar-example-data.git</connection>
		<developerConnection>scm:git:ssh://github.com:ikmdev/tinkar-example-data.git</developerConnection>
		<url>http://www.github.com/ikmdev/tinkar-example-data</url>
	</scm>

	<properties>
		<tinkar-example-data-properties.groupId>dev.ikm.maven.tinkar</tinkar-example-data-properties.groupId>
		<tinkar-example-data-properties.artifactId>tinkar-example-data-properties</tinkar-example-data-properties.artifactId>
		<tinkar-starter-data.groupId>dev.ikm.data.tinkar</tinkar-starter-data.groupId>
		<tinkar-starter-data.artifactId>tinkar-starter-data</tinkar-starter-data.artifactId>
		<tinkar-starter-data.classifier>unreasoned-sa</tinkar-starter-data.classifier>
		<!-- Properties for Ease of Use -->
		<tinkar-example-data-properties.path>${project.build.directory}/${tinkar-example-data-properties.artifactId}-${tinkar-example-data-properties.version}.properties</tinkar-example-data-properties.path>
		<datastore.path>${project.build.directory}/${tinkar-starter-data.artifactId}-${tinkar-starter-data.version}-${tinkar-starter-data.classifier}</datastore.path>
		<data-artifact.version>${data-artifact.propertiesVersion}+${project.version}</data-artifact.version>
		<data-artifact.prefix>${data-artifact.artifactId}-${data-artifact.version}</data-artifact.prefix>
		<data-artifact.path-prefix>${project.build.directory}/${data-artifact.prefix}</data-artifact.path-prefix>
		<deploymentFiles>${project.basedir}/pom.xml,${data-artifact.path-prefix}-unreasoned-sa.zip,${data-artifact.path-prefix}-reasoned-sa.zip,${data-artifact.path-prefix}-unreasoned-pb.zip,${data-artifact.path-prefix}-reasoned-pb.zip</deploymentFiles>
		<deploymentClassifiers>pipeline,unreasoned-sa,reasoned-sa,unreasoned-pb,reasoned-pb</deploymentClassifiers>
		<deploymentTypes>xml,zip,zip,zip,zip</deploymentTypes>
	</properties>

	<build>
		<plugins>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-dependency-plugin</artifactId>
				<executions>
					<execution>
						<id>copy-properties-dependency</id>
						<phase>validate</phase>
						<goals>
							<goal>copy</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>${tinkar-example-data-properties.groupId}</groupId>
									<artifactId>${tinkar-example-data-properties.artifactId}</artifactId>
									<version>${tinkar-example-data-properties.version}</version>
									<type>properties</type>
									<overWrite>true</overWrite>
									<outputDirectory>${project.build.directory}</outputDirectory>
								</artifactItem>
							</artifactItems>
						</configuration>
					</execution>
					<execution>
						<id>copy-tinkar-starter-data-dependency</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>unpack</goal>
						</goals>
						<configuration>
							<artifactItems>
								<artifactItem>
									<groupId>${tinkar-starter-data.groupId}</groupId>
									<artifactId>${tinkar-starter-data.artifactId}</artifactId>
									<version>${tinkar-starter-data.version}</version>
									<classifier>${tinkar-starter-data.classifier}</classifier>
									<type>zip</type>
									<overWrite>true</overWrite>
									<outputDirectory>${project.build.directory}</outputDirectory>
								</artifactItem>
							</artifactItems>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>properties-maven-plugin</artifactId>
				<executions>
					<execution>
					<phase>initialize</phase>
					<goals>
						<goal>read-project-properties</goal>
					</goals>
					<configuration>
						<files>
							<file>${tinkar-example-data-properties.path}</file>
						</files>
					</configuration>
					</execution>
				</executions>
			</plugin>
			
			<!-- Custom install each artifact using a different GAV configuration -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-install-plugin</artifactId>
				<configuration>
					<groupId>${data-artifact.groupId}</groupId>
					<artifactId>${data-artifact.artifactId}</artifactId>
					<version>${data-artifact.version}</version>
					<pomFile>${project.build.directory}/data-artifact-pom.xml</pomFile>
				</configuration>
				<executions>
					<execution>
						<id>install-properties-artifact</id>
						<goals>
							<goal>install-file</goal>
						</goals>
						<phase>install</phase>
						<configuration>
							<file>${tinkar-example-data-properties.path}</file>
							<packaging>properties</packaging>
						</configuration>
					</execution>
					<execution>
						<id>install-pipeline-definition</id>
						<phase>install</phase>
						<goals>
							<goal>install-file</goal>
						</goals>
						<configuration>
							<file>${project.basedir}/pom.xml</file>
							<classifier>pipeline</classifier>
							<packaging>xml</packaging>
						</configuration>
					</execution>
					<execution>
						<id>install-unreasoned-sa-artifact</id>
						<phase>install</phase>
						<goals>
							<goal>install-file</goal>
						</goals>
						<configuration>
							<file>${data-artifact.path-prefix}-unreasoned-sa.zip</file>
							<classifier>unreasoned-sa</classifier>
							<packaging>zip</packaging>
						</configuration>
					</execution>
					<execution>
						<id>install-reasoned-sa-artifact</id>
						<goals>
							<goal>install-file</goal>
						</goals>
						<phase>install</phase>
						<configuration>
							<file>${data-artifact.path-prefix}-reasoned-sa.zip</file>
							<classifier>reasoned-sa</classifier>
							<packaging>zip</packaging>
						</configuration>
					</execution>
					<execution>
						<id>install-unreasoned-pb-artifact</id>
						<goals>
							<goal>install-file</goal>
						</goals>
						<phase>install</phase>
						<configuration>
							<file>${data-artifact.path-prefix}-unreasoned-pb.zip</file>
							<classifier>unreasoned-pb</classifier>
							<packaging>zip</packaging>
						</configuration>
					</execution>
					<execution>
						<id>install-reasoned-pb-artifact</id>
						<goals>
							<goal>install-file</goal>
						</goals>
						<phase>install</phase>
						<configuration>
							<file>${data-artifact.path-prefix}-reasoned-pb.zip</file>
							<classifier>reasoned-pb</classifier>
							<packaging>zip</packaging>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<profiles>
	 	<profile>
			<id>generateData</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>templating-maven-plugin</artifactId>
						<executions>
							<execution>
								<id>inject-maven-properties</id>
								<goals>
									<goal>filter-sources</goal>
								</goals>
								<configuration>
									<sourceDirectory>data-artifact-pom-template</sourceDirectory>
									<outputDirectory>${project.build.directory}</outputDirectory>
									<skipPoms>false</skipPoms>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>dev.ikm.maven.tinkar</groupId>
						<artifactId>tinkar-example-data-maven-plugin</artifactId>
						<executions>
								<!-- Load starter data into data store -->
							<execution>
								<id>generate-tinkar-example-data</id>
								<goals>
									<goal>generate-example-data</goal>
								</goals>
								<configuration>
									<dataStore>${datastore.path}</dataStore>
								</configuration>
							</execution>
					</executions>
				</plugin>
			<plugin>
				<groupId>dev.ikm.maven.tinkar</groupId>
				<artifactId>tinkar-maven-plugin</artifactId>
				<configuration>
					<dataStore>${datastore.path}</dataStore>
				</configuration>
				<executions>
					<!-- Run OWL Transformer -->
					<execution>
						<id>owl-transform</id>
						<phase>compile</phase>
						<goals>
							<goal>run-owl-transformer</goal>
						</goals>
					</execution>
					<!-- Export data as a protocol buffers zip file -->
					<execution>
						<id>unreasoned-export</id>
						<phase>compile</phase> <!-- Overriding default phase to force this execution before reasoning -->
						<goals>
							<goal>export-tinkar-data</goal>
						</goals>
						<configuration>
							<exportDirectory>${project.build.directory}</exportDirectory>
							<fileName>${data-artifact.prefix}-unreasoned-pb.zip</fileName>
						</configuration>
					</execution>
					<!-- Run full reasoner -->
					<execution>
						<id>full-reasoner</id>
						<goals>
							<goal>run-full-reasoner</goal>
						</goals>
					</execution>
					<!-- Export data as a protocol buffers zip file -->
					<execution>
						<id>reasoned-export</id>
						<goals>
							<goal>export-tinkar-data</goal>
						</goals>
						<configuration>
							<exportDirectory>${project.build.directory}</exportDirectory>
							<fileName>${data-artifact.prefix}-reasoned-pb.zip</fileName>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<configuration>
					<finalName>${data-artifact.prefix}</finalName>
					<attach>false</attach>
					<inlineDescriptors>
						<inlineDescriptor>
							<formats>
								<format>zip</format>
							</formats>
							<fileSets>
								<fileSet>
									<directory>${datastore.path}</directory>
									<includes>
										<include>**</include>
									</includes>
									<excludes>
										<exclude>lucene/**</exclude>
									</excludes>
								</fileSet>
							</fileSets>
							<includeBaseDirectory>false</includeBaseDirectory>
						</inlineDescriptor>
					</inlineDescriptors>
				</configuration>
				<executions>
					<!-- Zip up unreasoned spinedarray database -->
					<execution>
						<id>unreasoned-sa-zip</id>
						<phase>compile</phase> <!-- Overriding default phase: force this execution before reasoning -->
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<inlineDescriptors>
								<inlineDescriptor>
									<id>unreasoned-sa</id>
									<fileSets>
										<fileSet>
											<outputDirectory>${data-artifact.prefix}-unreasoned-sa</outputDirectory>
										</fileSet>
									</fileSets>
								</inlineDescriptor>
							</inlineDescriptors>
						</configuration>
					</execution>
					<!-- Zip up reasoned spinedarray database -->
					<execution>
						<phase>package</phase>
						<id>reasoned-sa-zip</id>
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<inlineDescriptors>
								<inlineDescriptor>
									<id>reasoned-sa</id>
									<fileSets>
										<fileSet>
											<outputDirectory>${data-artifact.prefix}-reasoned-sa</outputDirectory>
										</fileSet>
									</fileSets>
								</inlineDescriptor>
							</inlineDescriptors>
						</configuration>
					</execution>
				</executions>
			</plugin>
		 </plugins>
			</build>
	 	</profile>
		<profile>
			<id>deploySnapshotDataArtifacts</id>
			<activation>
				<property>
					<name>repositoryId</name>
					<value>!ossrh</value>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-deploy-plugin</artifactId>
						<executions>
							<execution>
								<id>deploy-snapshot-artifacts</id>
								<phase>deploy</phase>
								<goals>
									<goal>deploy-file</goal>
								</goals>
								<configuration>
									<repositoryId>${repositoryId}</repositoryId>
									<url>${deployRepositoryUrl}</url>
									<groupId>${data-artifact.groupId}</groupId>
									<artifactId>${data-artifact.artifactId}</artifactId>
									<version>${data-artifact.version}</version>
									<pomFile>${project.build.directory}/data-artifact-pom.xml</pomFile>
									<file>${tinkar-example-data-properties.path}</file>
									<packaging>properties</packaging>
									<files>${deploymentFiles}</files>
									<classifiers>${deploymentClassifiers}</classifiers>
									<types>${deploymentTypes}</types>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>deployReleaseDataArtifacts</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-gpg-plugin</artifactId>
						<executions>
							<execution>
								<id>sign-and-deploy-release-artifacts</id>
								<phase>deploy</phase>
								<goals>
									<goal>sign-and-deploy-file</goal>
								</goals>
								<configuration>
									<repositoryId>${repositoryId}</repositoryId>
									<url>${project.distributionManagement.repository.url}</url>
									<groupId>${data-artifact.groupId}</groupId>
									<artifactId>${data-artifact.artifactId}</artifactId>
									<version>${data-artifact.version}</version>
									<pomFile>${project.build.directory}/data-artifact-pom.xml</pomFile>
									<file>${tinkar-example-data-properties.path}</file>
									<packaging>properties</packaging>
									<files>${deploymentFiles}</files>
									<classifiers>${deploymentClassifiers}</classifiers>
									<types>${deploymentTypes}</types>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<!-- Get the Repo URL from the altDeploymentRepository -->
			<id>altDeployRepo</id>
			<activation>
				<property>
					<name>altDeploymentRepository</name>
				</property>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>io.github.1tchy</groupId>
						<artifactId>variable-search-replace-plugin</artifactId>
						<executions>
							<execution>
								<goals>
									<goal>replace</goal>
								</goals>
								<configuration>
									<text>${altDeploymentRepository}</text>
									<search>^[^:]*::</search>
									<replacement></replacement>
									<variableName>deployRepositoryUrl</variableName>
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

</project>
